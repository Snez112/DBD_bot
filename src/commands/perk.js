const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const DataUpdater = require('../utils/dataUpdater');
const ContextManager = require('../utils/contextManager');
const config = require('../../config/config');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('perk')
        .setDescription('T√¨m ki·∫øm th√¥ng tin perk trong Dead by Daylight')
        .addStringOption(option =>
            option.setName('name')
                .setDescription('T√™n perk c·∫ßn t√¨m ki·∫øm')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('type')
                .setDescription('Lo·∫°i perk (killer/survivor/all)')
                .setRequired(false)
                .addChoices(
                    { name: 'T·∫•t c·∫£', value: 'all' },
                    { name: 'Killer', value: 'killer' },
                    { name: 'Survivor', value: 'survivor' }
                ))
        .addBooleanOption(option =>
            option.setName('translate')
                .setDescription('D·ªãch m√¥ t·∫£ sang ti·∫øng Vi·ªát')
                .setRequired(false)),

    async execute(interaction) {
        const perkName = interaction.options.getString('name');
        const perkType = interaction.options.getString('type') || 'all';
        const shouldTranslate = interaction.options.getBoolean('translate') || false;

        // Defer reply v√¨ vi·ªác t√¨m ki·∫øm c√≥ th·ªÉ m·∫•t th·ªùi gian
        await interaction.deferReply();

        try {
            const dataUpdater = new DataUpdater();
            const results = await dataUpdater.searchPerks(perkName, perkType);

            if (results.length === 0) {
                const embed = new EmbedBuilder()
                    .setColor(config.bot.embedColor)
                    .setTitle('‚ùå Kh√¥ng t√¨m th·∫•y perk')
                    .setDescription(`Kh√¥ng t√¨m th·∫•y perk n√†o v·ªõi t√™n "${perkName}"`)
                    .setTimestamp();

                return await interaction.editReply({ embeds: [embed] });
            }

            // N·∫øu ch·ªâ c√≥ 1 k·∫øt qu·∫£, hi·ªÉn th·ªã chi ti·∫øt
            if (results.length === 1) {
                const perk = results[0];
                const embed = await this.createDetailedPerkEmbed(perk, shouldTranslate);
                return await interaction.editReply({ embeds: [embed] });
            }

            // N·∫øu c√≥ nhi·ªÅu k·∫øt qu·∫£, hi·ªÉn th·ªã danh s√°ch
            const embed = new EmbedBuilder()
                .setColor(config.bot.embedColor)
                .setTitle(`üîç T√¨m th·∫•y ${results.length} perk`)
                .setDescription(`K·∫øt qu·∫£ t√¨m ki·∫øm cho "${perkName}":`)
                .setTimestamp();

            results.forEach((perk, index) => {
                const typeIcon = perk.type === 'killer' ? 'üî™' : 'üèÉ';
                const characterInfo = perk.characterName ? ` (${perk.characterName})` : '';
                
                embed.addFields({
                    name: `${index + 1}. ${typeIcon} ${perk.name}`,
                    value: `${perk.type.toUpperCase()}${characterInfo}\n*D√πng \`/perk name:${perk.name}\` ƒë·ªÉ xem chi ti·∫øt*`,
                    inline: false
                });
            });

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in perk command:', error);
            
            const embed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå L·ªói')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm perk. Vui l√≤ng th·ª≠ l·∫°i sau.')
                .setTimestamp();

            try {
                // Ki·ªÉm tra xem interaction ƒë√£ ƒë∆∞·ª£c reply ch∆∞a
                if (interaction.deferred || interaction.replied) {
                    await interaction.editReply({ embeds: [embed] });
                } else {
                    await interaction.reply({ embeds: [embed] });
                }
            } catch (replyError) {
                console.error('Error sending error message:', replyError);
            }
        }
    },

    async createDetailedPerkEmbed(perk, shouldTranslate = false) {
        const typeIcon = perk.type === 'killer' ? 'üî™' : 'üèÉ';
        const typeText = perk.type === 'killer' ? 'Killer Perk' : 'Survivor Perk';

        // S·ª≠ d·ª•ng Context Manager ƒë·ªÉ l·∫•y b·∫£n d·ªãch
        let description;
        if (shouldTranslate) {
            const contextManager = new ContextManager();
            const originalText = perk.contentText || perk.content;
            const perkURIName = perk.URIName || perk.name.toLowerCase().replace(/[^a-z0-9]/g, '_');
            
            description = await contextManager.getTranslation(perkURIName, originalText);
        } else {
            description = this.cleanDescription(perk.contentText || perk.content);
        }
        
        // Format description v·ªõi bullet points v√† c·∫•u tr√∫c r√µ r√†ng
        const formattedDescription = this.formatDescription(description, perk.name);
        
        const embed = new EmbedBuilder()
            .setColor(config.bot.embedColor)
            .setTitle(`${typeIcon} ${perk.name}`)
            .setDescription(formattedDescription)
            .setTimestamp();

        // Th√™m icon n·∫øu c√≥ v√† h·ª£p l·ªá
        if (perk.iconURL && this.isValidImageURL(perk.iconURL)) {
            embed.setThumbnail(perk.iconURL);
        }

        // Th√™m th√¥ng tin character n·∫øu c√≥
        if (perk.characterName) {
            embed.addFields({
                name: 'üë§ Character',
                value: perk.characterName,
                inline: true
            });
        }

        embed.addFields({
            name: 'üìã Type',
            value: typeText,
            inline: true
        });

        // Th√™m footer
        embed.setFooter({
            text: 'Dead by Daylight ‚Ä¢ Data from DBD Wiki',
            iconURL: 'https://static.wikia.nocookie.net/deadbydaylight_gamepedia_en/images/f/f0/IconHelp_DBDlogo.png'
        });

        return embed;
    },

    // L√†m s·∫°ch description v√† r√∫t ng·∫Øn
    cleanDescription(description) {
        if (!description) return 'Kh√¥ng c√≥ m√¥ t·∫£.';
        
        // Lo·∫°i b·ªè HTML tags
        let cleaned = description.replace(/<[^>]*>/g, '');
        
        // Thay th·∫ø c√°c entity HTML
        cleaned = cleaned
            .replace(/&nbsp;/g, ' ')
            .replace(/&amp;/g, '&')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'");
        
        // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        cleaned = cleaned.replace(/\s+/g, ' ').trim();
        
        // Lo·∫°i b·ªè c√°c th√¥ng b√°o v·ªÅ patch v√† version
        cleaned = cleaned.replace(/^This description is based on.*?(?=You|Your|When|After|Press|Grants|Increases|Reduces|Unlocks|The|A)/i, '');
        cleaned = cleaned.replace(/^the changes announced for.*?(?=You|Your|When|After|Press|Grants|Increases|Reduces|Unlocks|The|A)/i, '');
        cleaned = cleaned.replace(/^.*?Patch \d+\.\d+\.\d+.*?(?=You|Your|When|After|Press|Grants|Increases|Reduces|Unlocks|The|A)/i, '');
        
        // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a sau khi x√≥a patch info
        cleaned = cleaned.replace(/^\s+/, '').trim();
        
        // Lo·∫°i b·ªè quote ·ªü cu·ªëi nh∆∞ng gi·ªØ l·∫°i to√†n b·ªô m√¥ t·∫£ perk
        cleaned = cleaned.replace(/\s*"[^"]*"\s*‚Äî\s*[^"]*$/g, '').trim();
        
        // ƒê·∫£m b·∫£o c√¢u k·∫øt th√∫c ƒë√∫ng c√°ch
        if (cleaned && !cleaned.match(/[.!?]$/)) {
            // T√¨m d·∫•u ch·∫•m cu·ªëi c√πng h·ª£p l√Ω
            const lastPeriod = cleaned.lastIndexOf('.');
            if (lastPeriod > cleaned.length - 100 && lastPeriod > cleaned.length * 0.7) {
                cleaned = cleaned.substring(0, lastPeriod + 1);
            }
        }
        
        // Gi·ªõi h·∫°n ƒë·ªô d√†i h·ª£p l√Ω (Discord embed limit)
        if (cleaned.length > 1000) {
            cleaned = cleaned.substring(0, 997) + '...';
        }
        
        return cleaned || 'Kh√¥ng c√≥ m√¥ t·∫£.';
    },

    // Format description gi·ªëng h·ªát nh∆∞ trong game
    formatDescription(description, perkName = '') {
        if (!description) return 'Kh√¥ng c√≥ m√¥ t·∫£.';

        let formatted = description;

        // L√†m n·ªïi b·∫≠t t√™n perk
        if (perkName) {
            formatted = formatted.replace(new RegExp(`\\b${perkName}\\b`, 'g'), `**${perkName}**`);
        }

        // L√†m n·ªïi b·∫≠t c√°c thu·∫≠t ng·ªØ game
        formatted = formatted
            .replace(/\b(Aura|Skill Check|Terror Radius|Generator|Hook|Health State)\b/g, '**$1**')
            .replace(/\b(Exhausted|Endurance|Haste|Hindered|Exposed|Undetectable|Oblivious|Blindness|Broken|Deep Wound)\b/g, '**$1**')
            .replace(/(\d+(?:[/]\d+)*)\s*(%|gi√¢y|m√©t|seconds?|metres?)/g, '**$1$2**');

        // X·ª≠ l√Ω c·∫•u tr√∫c ƒë·∫∑c bi·ªát cho Aftercare-style perks
        if (formatted.includes('m·ªôt khi b·∫•t k·ª≥ ƒëi·ªÅu ki·ªán n√†o sau ƒë√¢y ƒë∆∞·ª£c ƒë√°p ·ª©ng') || 
            formatted.includes('once any of the following conditions have been met')) {
            
            // T√°ch ph·∫ßn m·ªü ƒë·∫ßu v√† ƒëi·ªÅu ki·ªán
            const parts = formatted.split(/(?:m·ªôt khi b·∫•t k·ª≥ ƒëi·ªÅu ki·ªán n√†o sau ƒë√¢y ƒë∆∞·ª£c ƒë√°p ·ª©ng|once any of the following conditions have been met)[.:]/i);
            
            if (parts.length >= 2) {
                const intro = parts[0].trim();
                const conditions = parts[1].trim();
                
                // T√°ch c√°c ƒëi·ªÅu ki·ªán th√†nh bullet points
                const conditionList = conditions
                    .split(/\.\s+/)
                    .filter(c => c.trim())
                    .map(condition => {
                        let c = condition.trim();
                        if (!c.endsWith('.')) c += '.';
                        
                        // Th√™m bullet point cho c√°c ƒëi·ªÅu ki·ªán
                        if (c.match(/^(B·∫°n ƒë√£|H·ªç ƒë√£|You have|They have)/)) {
                            return '‚Ä¢ ' + c;
                        }
                        return c;
                    })
                    .join('\n');
                
                formatted = intro + ':\n\n' + conditionList;
            }
        } else {
            // Format th√¥ng th∆∞·ªùng - t√°ch c√¢u v√† th√™m bullet points
            const sentences = formatted.split(/\.\s+/);
            const formattedSentences = [];
            
            for (let i = 0; i < sentences.length; i++) {
                let sentence = sentences[i].trim();
                if (!sentence) continue;
                
                if (!sentence.endsWith('.')) sentence += '.';
                
                // Th√™m bullet point cho ƒëi·ªÅu ki·ªán
                if (sentence.match(/^(B·∫°n ƒë√£|H·ªç ƒë√£|You have|They have|TƒÉng|Gi·∫£m|Increases?|Decreases?)/)) {
                    sentence = '‚Ä¢ ' + sentence;
                }
                
                formattedSentences.push(sentence);
            }
            
            formatted = formattedSentences.join('\n');
        }

        // L√†m s·∫°ch format cu·ªëi c√πng
        formatted = formatted
            .replace(/\n\s*\n\s*\n/g, '\n\n')
            .replace(/^\s+/gm, '')
            .trim();

        return formatted;
    },

    // Ki·ªÉm tra URL h√¨nh ·∫£nh c√≥ h·ª£p l·ªá kh√¥ng
    isValidImageURL(url) {
        if (!url || typeof url !== 'string') return false;

        // Lo·∫°i b·ªè data URLs v√† placeholder images
        if (url.startsWith('data:image') || url.includes('base64')) return false;

        // Ki·ªÉm tra URL c√≥ h·ª£p l·ªá kh√¥ng
        try {
            const urlObj = new URL(url);
            return urlObj.protocol === 'http:' || urlObj.protocol === 'https:';
        } catch {
            return false;
        }
    }
};
