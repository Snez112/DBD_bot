const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');

class Translator {
    constructor() {
        // Cache d·ªãch ƒë·ªÉ tr√°nh d·ªãch l·∫°i
        this.translationCache = new Map();
        
        // Load t·ª´ ƒëi·ªÉn t·ª´ file JSON
        this.loadDictionary();
    }

    // Load t·ª´ ƒëi·ªÉn t·ª´ file JSON
    loadDictionary() {
        try {
            const dictionaryPath = path.join(__dirname, '../data/dictionary.json');
            // X√≥a cache c·ªßa require ƒë·ªÉ load file m·ªõi
            delete require.cache[require.resolve('../data/dictionary.json')];
            const dictionary = JSON.parse(fs.readFileSync(dictionaryPath, 'utf8'));
            
            this.gameTerms = dictionary.gameTerms || {};
            this.keepEnglish = dictionary.keepEnglish || [];
            this.dbdPhrases = dictionary.dbdPhrases || {};
            this.commonWords = dictionary.commonWords || {};
            
            // X√≥a translation cache khi reload dictionary
            this.translationCache.clear();
            
            console.log('‚úÖ Loaded dictionary with', Object.keys(this.gameTerms).length, 'game terms');
        } catch (error) {
            console.error('‚ùå Failed to load dictionary:', error.message);
            // Fallback to empty dictionaries
            this.gameTerms = {};
            this.keepEnglish = [];
            this.dbdPhrases = {};
            this.commonWords = {};
        }
    }

    // Reload dictionary (ƒë·ªÉ update m√† kh√¥ng c·∫ßn restart)
    reloadDictionary() {
        console.log('üîÑ Reloading dictionary...');
        this.loadDictionary();
    }

    // D·ªãch description sang ti·∫øng Vi·ªát (ch·ªâ d√πng th·ªß c√¥ng)
    async translateDescription(description) {
        if (!description) return '';
        
        // Ki·ªÉm tra cache
        if (this.translationCache.has(description)) {
            return this.translationCache.get(description);
        }

        // D·ªãch th·ªß c√¥ng 100% cho chu·∫©n ng·ªØ c·∫£nh game
        let translated = this.translateManually(description);
        
        // L∆∞u v√†o cache
        this.translationCache.set(description, translated);
        
        return translated;
    }


    // √Åp d·ª•ng c√°c c·ª•m t·ª´ DBD ƒë·∫∑c bi·ªát
    applyDBDPhrases(text) {
        let result = text;
        
        for (const [english, vietnamese] of Object.entries(this.dbdPhrases)) {
            const regex = new RegExp(english.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
            result = result.replace(regex, vietnamese);
        }
        
        return result;
    }

    // Gi·ªØ nguy√™n c√°c thu·∫≠t ng·ªØ ti·∫øng Anh
    preserveEnglishTerms(text) {
        let result = text;
        
        for (const term of this.keepEnglish) {
            // T√¨m c√°c t·ª´ ti·∫øng Vi·ªát c√≥ th·ªÉ l√† b·∫£n d·ªãch sai c·ªßa thu·∫≠t ng·ªØ
            const possibleTranslations = this.getPossibleVietnameseTranslations(term);
            
            for (const viTerm of possibleTranslations) {
                const regex = new RegExp(`\\b${viTerm}\\b`, 'gi');
                result = result.replace(regex, term);
            }
        }
        
        return result;
    }

    // L·∫•y c√°c b·∫£n d·ªãch ti·∫øng Vi·ªát c√≥ th·ªÉ c√≥ c·ªßa thu·∫≠t ng·ªØ
    getPossibleVietnameseTranslations(englishTerm) {
        const translations = {
            'Exhausted': ['ki·ªát s·ª©c', 'm·ªát m·ªèi', 'c·∫°n ki·ªát'],
            'Endurance': ['s·ª©c b·ªÅn', 's·ª©c ch·ªãu ƒë·ª±ng', 'b·ªÅn b·ªâ'],
            'Haste': ['v·ªôi v√£', 'nhanh ch√≥ng', 'tƒÉng t·ªëc'],
            'Hindered': ['c·∫£n tr·ªü', 'b·ªã c·∫£n', 'l√†m ch·∫≠m'],
            'Exposed': ['ti·∫øp x√∫c', 'b·ªã l·ªô', 'ph∆°i b√†y'],
            'Undetectable': ['kh√¥ng th·ªÉ ph√°t hi·ªán', 'v√¥ h√¨nh', '·∫©n'],
            'Oblivious': ['m∆° m√†ng', 'kh√¥ng bi·∫øt', 'v√¥ t√¨nh'],
            'Blindness': ['m√π l√≤a', 'm√π', 'kh√¥ng nh√¨n th·∫•y'],
            'Broken': ['g√£y', 'h·ªèng', 'b·ªã ph√°'],
            'Deep Wound': ['v·∫øt th∆∞∆°ng s√¢u', 'th∆∞∆°ng t√≠ch s√¢u'],
            'Survivor': ['ng∆∞·ªùi s·ªëng s√≥t', 'k·∫ª s·ªëng s√≥t', 'ng∆∞·ªùi tho√°t'],
            'Killer': ['k·∫ª gi·∫øt ng∆∞·ªùi', 's√°t th·ªß', 'k·∫ª s√°t h·∫°i']
        };
        
        return translations[englishTerm] || [];
    }

    // √Åp d·ª•ng thu·∫≠t ng·ªØ game ƒë√£ d·ªãch s·∫µn
    applyGameTerms(text) {
        let result = text;
        
        for (const [english, vietnamese] of Object.entries(this.gameTerms)) {
            const regex = new RegExp(`\\b${english}\\b`, 'gi');
            result = result.replace(regex, vietnamese);
        }
        
        return result;
    }

    // D·ªãch th·ªß c√¥ng ch√≠nh x√°c theo ng·ªØ c·∫£nh DBD
    translateManually(description) {
        let translated = description;
        
        // B∆∞·ªõc 0: T√°ch v√† b·∫£o v·ªá c√°c quote c·ªßa nh√¢n v·∫≠t
        const { textWithoutQuotes, quotes } = this.extractQuotes(translated);
        translated = textWithoutQuotes;
        
        // B∆∞·ªõc 1: √Åp d·ª•ng c·ª•m t·ª´ DBD ƒë·∫∑c bi·ªát tr∆∞·ªõc (∆∞u ti√™n cao nh·∫•t)
        translated = this.applyDBDPhrases(translated);
        
        // B∆∞·ªõc 2: √Åp d·ª•ng thu·∫≠t ng·ªØ game ƒë√£ d·ªãch s·∫µn
        translated = this.applyGameTerms(translated);
        
        // B∆∞·ªõc 3a: X·ª≠ l√Ω c√°c t·ª´ c√≥ prefix tr∆∞·ªõc (ƒë·ªÉ tr√°nh t√°ch nh·∫ßm)
        const prefixWords = {
            'deactivates': 'b·ªã v√¥ hi·ªáu h√≥a',
            'reactivates': 'ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i',
            'preactivates': 'ƒë∆∞·ª£c k√≠ch ho·∫°t tr∆∞·ªõc'
        };
        
        for (const [english, vietnamese] of Object.entries(prefixWords)) {
            const regex = new RegExp(english, 'gi');
            translated = translated.replace(regex, vietnamese);
        }
        
        // B∆∞·ªõc 3b: D·ªãch t·ª´ th√¥ng th∆∞·ªùng (t·ª´ng t·ª´)
        for (const [english, vietnamese] of Object.entries(this.commonWords)) {
            if (vietnamese && !prefixWords.hasOwnProperty(english)) { // B·ªè qua t·ª´ ƒë√£ x·ª≠ l√Ω
                const regex = new RegExp(`\\b${english}\\b`, 'gi');
                translated = translated.replace(regex, vietnamese);
            }
        }
        
        // B∆∞·ªõc 4: Gi·ªØ nguy√™n thu·∫≠t ng·ªØ ti·∫øng Anh (∆∞u ti√™n cao nh·∫•t)
        translated = this.preserveEnglishTerms(translated);
        
        // B∆∞·ªõc 5: Gh√©p l·∫°i c√°c quote g·ªëc
        translated = this.restoreQuotes(translated, quotes);
        
        // B∆∞·ªõc 6: L√†m s·∫°ch v√† chu·∫©n h√≥a
        return this.cleanTranslation(translated);
    }

    // Lo·∫°i b·ªè ho√†n to√†n c√°c quote c·ªßa nh√¢n v·∫≠t
    extractQuotes(text) {
        let textWithoutQuotes = text;
        
        // Lo·∫°i b·ªè c√°c quote pattern: "..." ‚Äî Character ho·∫∑c "..." - Character
        const quotePatterns = [
            /"[^"]+"\s*[‚Äî-]\s*[^"\n]+/g,  // "quote" ‚Äî Character
            /"[^"]+"\s*-\s*[^"\n]+/g,     // "quote" - Character  
            /\n?"[^"]+"\s*[‚Äî-]\s*[^"\n]+/g // C√≥ th·ªÉ c√≥ newline tr∆∞·ªõc
        ];
        
        for (const pattern of quotePatterns) {
            textWithoutQuotes = textWithoutQuotes.replace(pattern, '');
        }
        
        // L√†m s·∫°ch kho·∫£ng tr·∫Øng th·ª´a
        textWithoutQuotes = textWithoutQuotes
            .replace(/\n\s*\n/g, '\n') // Lo·∫°i b·ªè d√≤ng tr·ªëng th·ª´a
            .replace(/\s+$/g, '')      // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng cu·ªëi
            .trim();
        
        return { textWithoutQuotes, quotes: [] };
    }

    // Kh√¥ng c·∫ßn kh√¥i ph·ª•c quote n·ªØa
    restoreQuotes(text, quotes) {
        return text; // Tr·∫£ v·ªÅ text ƒë√£ lo·∫°i b·ªè quote
    }

    // L√†m s·∫°ch b·∫£n d·ªãch
    cleanTranslation(text) {
        return text
            .replace(/\s+/g, ' ') // Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
            .replace(/\s*([,.!?:;])/g, '$1') // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng tr∆∞·ªõc d·∫•u c√¢u
            .replace(/([,.!?:;])\s*/g, '$1 ') // Th√™m kho·∫£ng tr·∫Øng sau d·∫•u c√¢u
            .trim();
    }

    // D·ªãch m·ªôt perk object
    async translatePerk(perk) {
        const translatedPerk = { ...perk };
        
        if (perk.content) {
            translatedPerk.contentVi = await this.translateDescription(perk.content);
        }
        
        if (perk.contentText) {
            translatedPerk.contentTextVi = await this.translateDescription(perk.contentText);
        }
        
        return translatedPerk;
    }
}

module.exports = Translator;